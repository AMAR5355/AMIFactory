{
    "schemaVersion": "0.3",
    "description": "Creates a new Windows Foundation AMI from the specified source AMI. Supports Windows Server 2008 R2 and greater.",
    "assumeRole": "{{AutomationAssumeRole}}",
    "parameters": {
      "SourceAmiId": {
        "type": "String",
        "description": "(Required) The source Amazon Machine Image ID."
      },
      "SubnetId":{
         "type":"String",
         "description":"(Required) The subnet that the created instance will be placed into.",
         "default": "{{ssm:/amifactory/baking-subnet}}"
      },
      "InstanceKeyPairName": {
        "type": "String",
        "description": "(Optional) The key pair used for the instance.",
        "default": "{{ssm:/amifactory/instance-key-pair}}"
      },
      "AutomationAssumeRole": {
        "type": "String",
        "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
        "default":"arn:aws:iam::{{global:ACCOUNT_ID}}:role/AmiFactoryAutomationServiceRole"
      },
      "WindowsFeaturesList": {
        "type": "String",
        "description": "(Required) The list of windows features to be installed."
      },
      "OSVersion": {
        "type": "String",
        "description": "The OS version be used to configure this image.",
        "allowedValues" : ["WindowsServer2016", "WindowsServer2012r2", "WindowsServer2008r2"]
      },
      "IamInstanceProfileName": {
        "type": "String",
        "description": "(Required) The name of the role that enables Systems Manager to manage the instance.",
        "default": "AmiFactoryManagedInstanceProfile"
      },
      "TargetAmiName": {
        "type": "String",
        "description": "(Optional) The name of the new AMI that will be created. Default is a system-generated string including the source AMI id, and the creation time and date.",
        "default":"AMIFactory_{{OSVersion}}_Foundation_created_{{global:DATE_TIME}}"
      },
      "InstanceType": {
        "type": "String",
        "description": "(Optional) Type of instance to launch as the workspace host. Instance types vary by region. Default is t2.medium.",
        "default": "t2.medium"
      },
      "GenerationEnvironment" : {
        "type" : "String",
        "description": "The environment in which this AMI is being generated.",
        "default" : "{{ssm:/amifactory/baking-environment}}"
      }
    },
    "mainSteps": [
      {
        "name": "LaunchInstance",
        "action": "aws:runInstances",
        "timeoutSeconds": 2400,
        "maxAttempts": 3,
        "onFailure": "Abort",
        "inputs": {
          "ImageId": "{{SourceAmiId}}",
          "InstanceType": "{{InstanceType}}",
          "SubnetId":"{{SubnetId}}",
          "MinInstanceCount": 1,
          "MaxInstanceCount": 1,
          "IamInstanceProfileName": "{{IamInstanceProfileName}}",
          "KeyName": "{{InstanceKeyPairName}}",
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "VolumeSize": 30,
                "VolumeType": "gp2",
                "DeleteOnTermination" : true
              }
            }
          ],
          "TagSpecifications":[
            {
              "ResourceType":"instance",
              "Tags":[
                {
                  "Key": "Name",
                  "Value": "AMIFactory_PreBakeInstance_{{OSVersion}}"
                },
                {
                  "Key":"AutomationExecutionId",
                  "Value":"{{automation:EXECUTION_ID}}"
                },
                {
                  "Key":"Iteration",
                  "Value":"Foundation"
                }
              ]
            }
          ],
          "UserData": "PHBvd2Vyc2hlbGw+DQpSZXN0YXJ0LVNlcnZpY2UgQW1hem9uU1NNQWdlbnQNCjwvcG93ZXJzaGVsbD4="
        }
      },
      {
        "name":"PowerNap",
        "action":"aws:sleep",
        "inputs":{
           "Duration":"PT3M"
        }
      },
      {
        "name": "OSCompatibilityCheck",
        "action": "aws:runCommand",
        "maxAttempts": 3,
			  "onFailure": "step:TerminateInstancewithPredjudice",
			  "timeoutSeconds": 1800,
        "inputs": {
          "DocumentName": "AWS-RunPowerShellScript",
          "InstanceIds": ["{{LaunchInstance.InstanceIds}}"],
          "Parameters": {
            "commands": [
              "[System.Version]$osversion = [System.Environment]::OSVersion.Version",
              "if(($osversion.Major -eq 6 -and $osversion.Minor -ge 1) -or ($osversion.Major -ge 10)) {",
              "  Write-Host 'This OS is supported for use with this automation document.'",
              "} else {",
              "  Write-Host 'This OS is not supported for use with this automation document.'",
              "  exit -1",
              "}"         
            ]
          }
        }
      },
      {
        "name": "InstallAWSCLI",
        "action": "aws:runCommand",
        "maxAttempts": 3,
			  "onFailure": "step:TerminateInstancewithPredjudice",
			  "timeoutSeconds": 1800,
        "inputs": {
          "DocumentName":"AWS-RunPowerShellScript",
          "InstanceIds":["{{LaunchInstance.InstanceIds}}"],
          "Parameters": {
            "commands": [
              "mkdir C:\\serverInit",
              "$src = 'https://s3.amazonaws.com/aws-cli/AWSCLI32.msi'",
              "$installer = 'C:\\serverInit\\AWSCLI32.msi'",
              "Start-Process powershell.exe -Wait -ArgumentList \"Invoke-WebRequest $src -OutFile $installer\"",
              "Start-Process msiexec.exe -Wait -ArgumentList \"/qn /i $installer\"",
              "Remove-Item $installer"
            ]
          }
        }
      },
      {
        "name": "AddWindowsFeatures",
        "action": "aws:runCommand",
        "maxAttempts": 3,
			  "onFailure": "step:TerminateInstancewithPredjudice",
			  "timeoutSeconds": 7200,
        "inputs": {
          "DocumentName":"AWS-RunPowerShellScript",
          "InstanceIds":["{{LaunchInstance.InstanceIds}}"],
          "Parameters": {
            "commands": [
                "$features = @({{WindowsFeaturesList}})",
                "Foreach($feature in $features) {",
                " Add-WindowsFeature -Name $feature",
                "}"
              ]
            }
          }
      },
      {
        "name": "DisableWindowsFirewall",
        "action": "aws:runCommand",
        "maxAttempts": 3,
			  "onFailure": "step:TerminateInstancewithPredjudice",
			  "timeoutSeconds": 1800,
        "inputs": {
          "DocumentName":"AWS-RunPowerShellScript",
          "InstanceIds":["{{LaunchInstance.InstanceIds}}"],
          "Parameters": {
            "commands": [
              "netsh advfirewall set allprofiles state off"
            ]
          }
        }
      },
      {
        "name": "RestartWindows",
        "action": "aws:runCommand",
        "maxAttempts": 3,
			  "onFailure": "step:TerminateInstancewithPredjudice",
			  "timeoutSeconds": 1800,
        "inputs": {
          "DocumentName":"AWS-RunPowerShellScript",
          "InstanceIds":["{{LaunchInstance.InstanceIds}}"],
          "Parameters": {
            "commands": [
              "Restart-Computer"
            ]
          }
        }
      },
      {
        "name": "RunSysprepGeneralize",
        "action": "aws:runCommand",
        "maxAttempts": 3,
			  "onFailure": "step:TerminateInstancewithPredjudice",
			  "timeoutSeconds": 7200,
        "inputs": {
          "DocumentName": "AWS-RunPowerShellScript",
          "InstanceIds": ["{{LaunchInstance.InstanceIds}}"],
          "Parameters": {
            "commands": [
              "$moduleName = 'AWSUpdateWindowsInstance'",
              "$zipFilename = 'AWSUpdateWindowsInstance.zip'",
              "$tempPath = $env:TEMP",
              "$moduleDirectory = Join-Path $tempPath -ChildPath $moduleName",
              "$moduleZipFilePath = Join-Path $tempPath -ChildPath $zipFilename",
              "$moduleManifestPath = Join-Path $moduleDirectory -ChildPath ('{0}.psd1' -f $moduleName)",
              "$id = '{{automation:EXECUTION_ID}}'",
              "",
              "function Main {",
              "    Test-PreCondition",
              "    Clear-WindowsUpdateModule",
              "    Get-WindowsUpdateModule",
              "    Expand-WindowsUpdateModule",
              "    Invoke-RunSysprep",
              "}",
              "function Test-PreCondition {",
              "    $osversion = [Environment]::OSVersion.Version",
              "    if ($osversion.Major -le 5) {",
              "        Write-Host 'This document is not supported on Windows Server 2003 or earlier.'",
              "        Exit -1",
              "    }",
              "",
              "    if ($osversion.Version -ge '10.0') {",
              "        $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU",
              "        if ($sku -eq 143 -or $sku -eq 144) {",
              "            Write-Host 'This document is not supported on Windows 2016 Nano Server.'",
              "            Exit -1",
              "        }",
              "    }",
              "",
              "    $ssmAgentService = Get-ItemProperty 'HKLM:SYSTEM\\CurrentControlSet\\Services\\AmazonSSMAgent\\' -ErrorAction SilentlyContinue",
              "    if (-not $ssmAgentService -or $ssmAgentService.Version -lt '2.0.533.0') {",
              "        Write-Host 'This document is not supported with SSM Agent version less than 2.0.533.0.'",
              "        exit -1",
              "    }",
              "}",
              "",
              "function Clear-WindowsUpdateModule {",
              "  try {",
              "    if (Test-Path $moduleDirectory) {",
              "        Remove-Item $moduleDirectory -Force -Recurse",
              "    }",
              "    if (Test-Path $moduleZipFilePath) {",
              "        Remove-Item $moduleZipFilePath -Force",
              "    }",
              "  } catch {",
              "    Write-Host \"Cleaning Windows update module resulted in error: $($_)\"",
              "  }",
              "}",
              "",
              "function Get-WindowsUpdateModule {",
              "    try {",
              "       $region = $env:AWS_SSM_REGION_NAME",
              "        if ($region.StartsWith('cn-')) {",
              "            $s3Location = 'https://s3.{0}.amazonaws.com.cn/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/Latest/{1}'",
              "        } elseif($region.StartsWith('us-gov-')) {",
              "            $s3Location = 'https://s3-fips-{0}.amazonaws.com/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/Latest/{1}'",
              "        } elseif($region -eq 'us-east-1') {",
              "            $s3Location = 'https://s3.amazonaws.com/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/Latest/{1}'",
              "        } else {",
              "            $s3Location = 'https://aws-windows-downloads-{0}.s3.amazonaws.com/PSModules/AWSUpdateWindowsInstance/Latest/{1}'",
              "        }",
              "",
              "        $moduleS3Location = $s3Location -f $region, $zipFilename",
              "        $moduleLocalPath = Join-Path $tempPath -ChildPath $zipFilename",
              "        (New-Object Net.WebClient).DownloadFile($moduleS3Location, $moduleLocalPath)",
              "",
              "        $fileStream = New-Object System.IO.FileStream($moduleLocalPath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)",
              "        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')",
              "        $currentHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()",
              "        $sha256.Dispose()",
              "        $fileStream.Dispose()",
              "",
              "        if ($currentHash -ne 'B32D397AAA312E5EB0B2E0E0BC7146FB716AED3867A73FA650E0F222DF1079AE') {",
              "            Write-Host 'The SHA hash of the module does not match the expected value.'",
              "            Exit -1",
              "        }",
              "    } catch {",
              "        Write-Host ('Error encountered while getting the module: {0}.' -f $_.Exception.Message)",
              "        Exit -1",
              "    }",
              "}",
              "",
              "function Expand-WindowsUpdateModule {",
              "    try {",
              "        [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null",
              "        $zip = [System.IO.Compression.ZipFile]::OpenRead($moduleZipFilePath)",
              "        foreach ($item in $zip.Entries) {",
              "            $extractPath = Join-Path $tempPath -ChildPath $item.FullName",
              "            if ($item.Length -eq 0) {",
              "                if (-not (Test-Path $extractPath)) {",
              "                    New-Item $extractPath -ItemType Directory | Out-Null",
              "                }",
              "            } else {",
              "                $parentPath = Split-Path $extractPath",
              "                if (-not (Test-Path $parentPath)) {",
              "                    New-Item $parentPath -ItemType Directory | Out-Null",
              "                }",
              "                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item, $extractPath, $true)",
              "            }",
              "        }",
              "    } catch {",
              "        Write-Host ('Error encountered when extracting module file: {0}.' -f $_.Exception.Message)",
              "        Exit -1",
              "    } finally {",
              "        $zip.Dispose()",
              "    }",
              "}",
              "",
              "function Invoke-RunSysprep {",
              "    Import-Module $moduleManifestPath",
              "    $command = 'Start-AwsUwiSysprep'",
              "    if($id) { $command += \" -Id $($id)\"}",
              "    Invoke-Expression $command",
              "}",
              "",
              "Main"
            ]
          }
        }
      },
      {
        "name":"StopInstance",
        "action": "aws:changeInstanceState",
        "maxAttempts": 3,
        "timeoutSeconds": 7200,
        "onFailure": "Abort",
        "inputs": {
          "InstanceIds": ["{{LaunchInstance.InstanceIds}}"],
          "CheckStateOnly": false,
          "DesiredState": "stopped"
        }
      },
      {
        "name":"CreateImage",
        "action": "aws:createImage",
        "maxAttempts": 3,
        "onFailure": "Abort",
        "inputs": {
          "InstanceId": "{{LaunchInstance.InstanceIds}}",
          "ImageName":  "{{TargetAmiName}}",
          "NoReboot": true,
          "ImageDescription": "This is a custom Foundation AMI created by the AMI Factory"
        }
      },
      {
        "name":"CreateAMITags",
        "action":"aws:createTags",
        "maxAttempts": 3,
        "onFailure":"Abort",     
        "inputs":{
          "ResourceType":"EC2",
          "ResourceIds":[
            "{{CreateImage.ImageId}}"
          ],
          "Tags":[
            {
              "Key": "SourceAmiId",
              "Value": "{{SourceAmiId}}"
            },
            {
              "Key":"AutomationExecutionId",
              "Value":"{{automation:EXECUTION_ID}}"
            },
            {
              "Key":"ServerOS",
              "Value":"{{OSVersion}}"
            },
            {
              "Key":"GenerationEnvironment",
              "Value":"{{GenerationEnvironment}}-{{global:ACCOUNT_ID}}"
            }
          ]
        }
      },
      {
        "name":"TerminateInstance",
        "action": "aws:changeInstanceState",
        "maxAttempts": 3,
        "onFailure": "Continue",       
        "inputs": {
          "InstanceIds": ["{{LaunchInstance.InstanceIds}}"],
          "DesiredState": "terminated"
        }
      },
      {
        "name":"ExecuteValidationWorkflow",
        "action":"aws:executeAutomation",
        "maxAttempts":1,
        "timeoutSeconds":7200,
        "onFailure":"Abort",
        "inputs":{
           "DocumentName":"AMIFactory-Foundation-Validation",
           "RuntimeParameters":{
              "TargetAmiId":"{{CreateImage.ImageId}}",
              "WindowsFeaturesList": "{{WindowsFeaturesList}}",
              "SubnetId": "{{SubnetId}}",
              "IamInstanceProfileName": "{{IamInstanceProfileName}}", 
              "AutomationAssumeRole": "{{AutomationAssumeRole}}", 
              "InstanceType": "{{InstanceType}}",
              "GenerationEnvironment" : "{{GenerationEnvironment}}", 
              "InstanceKeyPairName": "{{InstanceKeyPairName}}",
              "OSVersion": "{{OSVersion}}"
           }
        }
      },
      {
        "name":"TerminateInstancewithPredjudice",
        "action": "aws:changeInstanceState",
        "maxAttempts": 3,
        "onFailure": "Continue",       
        "inputs": {
          "InstanceIds": ["{{LaunchInstance.InstanceIds}}"],
          "DesiredState": "terminated"
        },
        "isEnd":true
      }
    ],
    "outputs":["CreateImage.ImageId"]
  }